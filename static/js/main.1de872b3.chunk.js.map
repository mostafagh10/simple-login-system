{"version":3,"sources":["login/index.js","logout/index.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","username","password","handlevalue","e","setState","target","id","value","handlesubmit","x","document","getElementById","props","handleget","className","type","onChange","this","placeholder","to","onClick","disabled","Component","Logout","App","username1","z","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gTA4CeA,G,kNAtCXC,MAAM,CACFC,SAAS,GACTC,SAAS,I,EAGbC,YAAc,SAACC,GACX,EAAKC,SAAL,eACKD,EAAEE,OAAOC,GAAMH,EAAEE,OAAOE,S,EAIjCC,aAAe,SAACL,GACZ,IAAIM,EAAI,EAAKV,MAAMC,SACX,EAAKD,MAAME,SACXS,SAASC,eAAe,OAChC,EAAKC,MAAMC,UAAU,WAAaJ,I,uDAMxC,OACE,yBAAKK,UAAU,aACf,yBAAKA,UAAU,QAAQR,GAAG,UACtB,sCAAe,6BACjB,8BACA,2BAAOS,KAAK,OAAOT,GAAG,WAAWU,SAAUC,KAAKf,YAAagB,YAAY,cAEzE,8BAAM,6BACN,2BAAOH,KAAK,WAAWT,GAAG,WAAWU,SAAUC,KAAKf,YAAagB,YAAY,cACtE,6BACP,kBAAC,IAAD,CAAMC,GAAG,UAAS,4BAAQb,GAAG,MAAMc,QAASH,KAAKT,aAAca,UAAWJ,KAAKlB,MAAMC,WAAaiB,KAAKlB,MAAME,UAA3F,iB,GAjCJqB,cCULC,G,6KATb,OACE,yBAAKT,UAAU,SAASR,GAAG,aACzB,4BAAKW,KAAKL,MAAMN,IAAQ,6BACxB,kBAAC,IAAD,CAAMa,GAAG,KAAI,4BAAQL,UAAU,OAAlB,gB,GALEQ,cC2BNE,G,kNAtBbzB,MAAQ,CACN0B,UAAY,I,EAGdZ,UAAY,SAACa,GACX,EAAKtB,SAAS,CACZqB,UAAYC,K,uDAIP,IAAD,OACR,OACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOa,OAAK,EAACC,KAAK,IAAIC,UAAW,kBAAM,kBAAC,EAAD,CAAOhB,UAAW,EAAKA,eAC9D,kBAAC,IAAD,CAAOc,OAAK,EAACC,KAAK,SAASC,UAAW,kBAAM,kBAAC,EAAD,CAAQvB,GAAI,EAAKP,MAAM0B,qB,GAjBvDH,cCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1de872b3.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport './style.css'\r\n\r\nclass Login extends Component {\r\n\r\n    state={\r\n        username:'',\r\n        password:''\r\n    }\r\n\r\n    handlevalue = (e) => {\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    \r\n    handlesubmit = (e) => {\r\n        var x = this.state.username;\r\n        var z = this.state.password;\r\n        var y = document.getElementById(\"one\");\r\n        this.props.handleget(\"Welcome \" + x)\r\n        \r\n    }\r\n\r\n\r\n  render(){\r\n  return (\r\n    <div className=\"container\">\r\n    <div className=\"Login\" id=\"logone\">\r\n        <h1>Log in</h1><br />\r\n      <form>\r\n      <input type=\"text\" id=\"username\" onChange={this.handlevalue} placeholder=\"username\" />\r\n      </form>\r\n      <form><br />\r\n      <input type=\"password\" id=\"password\" onChange={this.handlevalue} placeholder=\"password\"/>\r\n      </form><br />\r\n      <Link to=\"/login\"><button id=\"one\" onClick={this.handlesubmit} disabled={!this.state.username || !this.state.password}>log in</button></Link>\r\n    </div>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Login;\r\n","import React, { Component } from 'react';\r\nimport {Link} from 'react-router-dom'\r\nimport './style.css'\r\nclass Logout extends Component {\r\n  render(){\r\n  return (\r\n    <div className=\"Logout\" id=\"logoutone\">\r\n      <h1>{this.props.id}</h1><br />\r\n      <Link to=\"/\"><button className=\"two\">Logout</button></Link>\r\n    </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Logout;\r\n","import React, { Component } from 'react';\nimport {BrowserRouter,Route,HashRouter} from 'react-router-dom'\nimport Login from './login/index'\nimport Logout from './logout/index'\nimport 'bootstrap/dist/css/bootstrap.css'\n\nclass App extends Component {\n\n  state = {\n    username1 : ''\n  }\n\n  handleget = (z) => {\n    this.setState({\n      username1 : z\n    });\n  }\n\n  render(){\n  return (\n    <div className=\"App\">\n      <HashRouter>\n      <Route exact path=\"/\" component={() => <Login handleget={this.handleget}/>} />\n      <Route exact path=\"/login\" component={() => <Logout id={this.state.username1} />} />\n      </HashRouter>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}